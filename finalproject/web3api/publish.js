var Web3 = require("web3");
var web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:9545"));

var acc = web3.eth.accounts[0]; //get the first account



//Store this contract's compiled bytecode and ABI
var abi =[
	{
		"constant": false,
		"inputs": [
			{
				"name": "ID",
				"type": "bytes32"
			},
			{
				"name": "quantity",
				"type": "uint256"
			}
		],
		"name": "buy",
		"outputs": [],
		"payable": true,
		"stateMutability": "payable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "id",
				"type": "bytes32"
			},
			{
				"indexed": false,
				"name": "quantity",
				"type": "uint256"
			}
		],
		"name": "LogNewProduct",
		"type": "event"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "name",
				"type": "string"
			},
			{
				"name": "price",
				"type": "uint256"
			},
			{
				"name": "quantity",
				"type": "uint256"
			}
		],
		"name": "newProduct",
		"outputs": [
			{
				"name": "",
				"type": "bytes32"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "newOwner",
				"type": "address"
			}
		],
		"name": "transferOwnership",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "ID",
				"type": "bytes32"
			},
			{
				"name": "quantity",
				"type": "uint256"
			}
		],
		"name": "getPrice",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "ID",
				"type": "bytes32"
			}
		],
		"name": "getProduct",
		"outputs": [
			{
				"name": "name",
				"type": "string"
			},
			{
				"name": "price",
				"type": "uint256"
			},
			{
				"name": "quantity",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "getProducts",
		"outputs": [
			{
				"name": "",
				"type": "bytes32[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "owner",
		"outputs": [
			{
				"name": "",
				"type": "address"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "",
				"type": "bytes32"
			}
		],
		"name": "products",
		"outputs": [
			{
				"name": "ID",
				"type": "bytes32"
			},
			{
				"name": "quantity",
				"type": "uint256"
			},
			{
				"name": "price",
				"type": "uint256"
			},
			{
				"name": "name",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "ID",
				"type": "bytes32"
			},
			{
				"name": "newQuantity",
				"type": "uint256"
			}
		],
		"name": "update",
		"outputs": [],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	}
];
var bytecode = "6060604052336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610c99806100536000396000f300606060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630ddeb6321461009e5780633a20e9df146100c357806379054391146101715780638da5cb5b1461022e578063a58bb84a14610283578063c29b2f20146102b3578063c9280f061461031d578063e6f2642514610361578063f2fde38b146103ec575b600080fd5b6100c1600480803560001916906020019091908035906020019091905050610425565b005b34156100ce57600080fd5b6100e86004808035600019169060200190919050506104d3565b6040518080602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610134578082015181840152602081019050610119565b50505050905090810190601f1680156101615780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b341561017c57600080fd5b6101966004808035600019169060200190919050506105e3565b60405180856000191660001916815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156101f05780820151818401526020810190506101d5565b50505050905090810190601f16801561021d5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b341561023957600080fd5b6102416106ab565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561028e57600080fd5b6102b16004808035600019169060200190919080359060200190919050506106d0565b005b34156102be57600080fd5b6102c66107cd565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103095780820151818401526020810190506102ee565b505050509050019250505060405180910390f35b341561032857600080fd5b61034b60048080356000191690602001909190803590602001909190505061082f565b6040518082815260200191505060405180910390f35b341561036c57600080fd5b6103ce600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190803590602001909190803590602001909190505061086a565b60405180826000191660001916815260200191505060405180910390f35b34156103f757600080fd5b610423600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ac6565b005b80600160008460001916600019168152602001908152602001600020600101541015151561045257600080fd5b3461046f610460848461082f565b83610ba090919063ffffffff16565b1115151561047c57600080fd5b6104ad8160016000856000191660001916815260200190815260200160002060010154610bdb90919063ffffffff16565b600160008460001916600019168152602001908152602001600020600101819055505050565b6104db610bf4565b6000806001600085600019166000191681526020019081526020016000206003016001600086600019166000191681526020019081526020016000206002015460016000876000191660001916815260200190815260200160002060010154828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105cf5780601f106105a4576101008083540402835291602001916105cf565b820191906000526020600020905b8154815290600101906020018083116105b257829003601f168201915b505050505092509250925092509193909250565b6001602052806000526040600020600091509050806000015490806001015490806002015490806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106a15780601f10610676576101008083540402835291602001916106a1565b820191906000526020600020905b81548152906001019060200180831161068457829003601f168201915b5050505050905084565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561072b57600080fd5b6001600083600019166000191681526020019081526020016000207346e96663a5e19100c3ca6cd73d6b5fc06592292963013894989091836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018281526020019250505060006040518083038186803b15156107b957600080fd5b5af415156107c657600080fd5b5050505050565b6107d5610c08565b600280548060200260200160405190810160405280929190818152602001828054801561082557602002820191906000526020600020905b8154600019168152602001906001019080831161080d575b5050505050905090565b60006108628260016000866000191660001916815260200190815260200160002060020154610ba090919063ffffffff16565b905092915050565b6000806000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156108c857600080fd5b846040518082805190602001908083835b6020831015156108fe57805182526020820191506020810190506020830392506108d9565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902090506001600082600019166000191681526020019081526020016000207346e96663a5e19100c3ca6cd73d6b5fc0659229296315f9b7b090918386888a6040518663ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180868152602001856000191660001916815260200184815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156109f35780820151818401526020810190506109d8565b50505050905090810190601f168015610a205780820380516001836020036101000a031916815260200191505b50965050505050505060006040518083038186803b1515610a4057600080fd5b5af41515610a4d57600080fd5b50505060028054806001018281610a649190610c1c565b91600052602060002090016000839091909150906000191690555080600019167f8615f62552086a15b331fbb0dc2971bfe62fef3e4aaf948c82742d9f85b0b47b846040518082815260200191505060405180910390a2809150509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b2157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515610b5d57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000841415610bb55760009150610bd4565b8284029050828482811515610bc657fe5b04141515610bd057fe5b8091505b5092915050565b6000828211151515610be957fe5b818303905092915050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b815481835581811511610c4357818360005260206000209182019101610c429190610c48565b5b505050565b610c6a91905b80821115610c66576000816000905550600101610c4e565b5090565b905600a165627a7a723058208000811ef3698433c1be38c863c731c26899b7bb11f7feb08943c216c095ef500029"

//create the contract instance. We can use this instance to publish or connect to a published contract
var Contract = web3.eth.contract(abi);

//create a JS Object (key-value pairs), holding the data we need to publish our contract
var publishData = {
	"from": acc, //the account from which it will be published
	"data": bytecode,
	"gas": 4000000 //gas limit. This should be the same or lower than Ethereum's gas limit
}

//publish the contract, passing a callback that will be called twice. Once when the transaction is sent, and once when it is mined
//the first argument is the constructor argument
Contract.new(publishData, function(err, contractInstance) {
	if(!err) {
		if(contractInstance.address) { //if the contract has an address aka if the transaction is mined
			console.log("New contract address is :", contractInstance.address);
		}
	} else {
		console.error(err); //something went wrong
	}
});
